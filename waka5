<#
 Import ActiveDirectory Module
PS C:\> import-module servermanager 
PS C:\> Add-WindowsFeature -Name “RSAT-AD-PowerShell” -IncludeAllSubFeature
#>


Import-Module C:\usersystem\afteradd\Scripts\PSFTP\PSFTP
Import-Module C:\usersystem\afteradd\scripts\SSH-Sessions\SSH-Sessions

C:\usersystem\afteradd\Scripts\export-log.ps1

## FTP  環境変数
$FTP_Server="ftp://163.51.200.140"
$FTP_User="bostadmin"
$FTP_Pass="32sFAGKm"
$FTP_Passwd=ConvertTo-SecureString –String $FTP_Pass –AsPlainText -Force
$cred = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList $FTP_User,$FTP_Passwd
$FTP_Session = "FromAWS"
$NEW_CSV_PATH="/ftp/seibutsu/add"
$DEL_CSV_PATH="/ftp/seibutsu/dell"
$FTP_NEW_CSV_PATH = Join-Parts -Separator "/" -Parts $FTP_Server,$NEW_CSV_PATH
$FTP_DEL_CSV_PATH = Join-Parts -Separator "/" -Parts $FTP_Server,$DEL_CSV_PATH
$Local_DownLoad_Path="usersystem\afteradd\scripts\data"
$Local_DownLoad_Drive="C:"

## SSH 環境変数
$SSH_Server="172.28.201.145"
$SSH_User="root"
$SSH_Pass="Usk6v9EE"
$SSH_Port="22"

## ファイルサーバ変数
[string]$WINFS="waka-nascl01u1"                            ##ファイルサーバ クラスター名
[string]$target="\\waka-nascl01u1\"                        ##ディレクトリパス置換用文字列 置換前
[string]$replace="x:\vol\data-userdata_stu-tea_rw\"        ##ディレクトリパス置換用文字列 置換後
$WinCredential
## CSV 環境変数
[string]$CSV_HeaderSTR="adhomedir,uid,group,option04,option03"
## CSV読み込み
[string]$CSV_Header = $CSV_HeadStr -split ","

[string]$EMSG_AccChk_NOTEXIST="アカウントがADに登録されていません"
[string]$EMSG_Set_ADGroup="既にグループに登録されています。->"
[string]$EMSG_Set_ADGroup_Error="既にグループに登録されています。->"
[string]$MSG_Set_PrimaryGrp="プライマリグループへの追加終了"
[string]$EMSG_Set_PrimaryGrp_Error="プライマリグループの変更ができません。->"
[string]$EMSG_PrimaryGrp_Error="プライマリグループに所属していないため変更ができません。->"
[string]$MSG_DELCSV_OLD_EXIST="OLD_CSVファイルがロカールに存在するためFTP削除はSKIPします。->"
[string]$MSG_DELCSV_CSV_EXIST="CSVファイルがロカールに存在するためFTP削除はSKIPします。->"
[string]$MSG_HomeDir_Create="ユーザーディレクトリ作成->"
[string]$MSG_HomeDir_public="public_htmlディレクトリ作成->"
[string]$MSG_HomeDir_private="private_htmlディレクトリ作成->"
[string]$MSG_HomeDir_grant="ユーザーディレクトリNTFS権限変更->"
[string]$MSG_HomeDir_setown="ユーザーディレクトリ所有者変更->"
[string]$MSG_HomeDir_robocopy="ユーザーディレクトリのrobocopy->"
[string]$EMSG_HomeDir_Create="ユーザーディレクトリの作成できませんでした。->"

Function GET_NewUserCSV
{
##毎日AM 1:00実行
    GET_CSV $NEW_CSV_PATH         ###FTPサーバからCSV取得処理 登録CSV
    Create_HomeDir
    DEL_CSV $NEW_CSV_PATH         ###FTPサーバのCSV削除処理   登録CSV 
}

Function GET_DelUserCSV
##毎日AM 3:00実行
{
    GET_CSV $DEL_CSV_PATH         ###FTPサーバからCSV取得処理 削除CSV
    Move_Home
    DEL_CSV $DEL_CSV_PATH         ###FTPサーバのCSV削除処理   削除CSV
}

Function Create_HomeDir
{
    ## CSV  一覧取得
    $csv_list = Get-ChildItem -Path  (Join-Path $Local_Download_Drive $Local_Download_Path)
    foreach ($csvfile in $csv_list)
    {
    ## レコード  内容取得 (1行目 SKIP)
        $csvdata = Get-Content $csvfile |Select-Object -Skip 1 | ? {$_.trim() -ne "" } |ConvertFrom-Csv -Header $CSV_Header
        $csvdata | ForEach-Object {
    		if ((Check-Account $username) -gt 0) 
            {
                Add-wakaADGroup $_.uid $_.group                    ##AD Group 登録処理 
                Create_WindowsHomeDir $_.uid $_.group $_.adhomedir ## Windows Home (waka-nas01)作成
                Create_LinuxHomeDire  $_.uid $_.group $_.adhomedir ## Linux Home (waka-nfs01)作成  
            }
    ## CSV 処理済みファイル名変更
        Rename-File $csvdata.FullName  ($csvdata.Name.Replace(".csv","_old.csv"))
        }
    }
}

Function GET_CSV
{
	[OutputType([String])]
	[CmdletBinding()]
    Param
    (
        [Parameter(Mandatory=$True,Position = 0)]
        [String]$FTP_Path
    )
    Process 
    {
        Set-FTPConnection -Server $FTP_Server -Credential $cred -Session $FTP_Session -KeepAlive  -UsePassive   ## FTP接続
        $FTP_LIST=Get-FTPChildItem -Session $FTP_Session -Path $FTP_PATH
        $FTP_LIST |ForEach-Object {
            $Local_File = Join-Path $Local_Download_Drive $Local_Download_Path |Join-Path -ChildPath $_.Name
            if (-not (Test-path -Path $Local_File))
            {
                $LOCAL_OLD_FILE = $LOCAL_FILE.Replace(".csv","_old.csv")
                if (-not (Test-path -Path $LOCAL_OLD_FILE))
                {
                    Get-FTPItem -Session $FTP_Session -Path $FTP_List.FullName -LocalPath $Local_File
                }
                else
                {
                    Write-SkipLog ($EMSG_OLD_CSV_EXIST+$LOCAL_OLD_FILE)
                }    
            }
            else
            {
                Write-SkipLog ($EMSG_CSV_LOCAL_EXIST+$LOCAL_FILE)
            } 
        }
    }
}

Function DEL_CSV
{
	[OutputType([String])]
	[CmdletBinding()]
    Param
    (
        [Parameter(Mandatory=$True,Position = 0)]
        [String]$FTP_Path
    )
    Process 
    {
        Set-FTPConnection -Server $FTP_Server -Credential $cred -Session $FTP_Session -KeepAlive  -UsePassive
        $FTP_LIST=Get-FTPChildItem -Session $FTP_Session -Path $FTP_PATH
        $FTP_LIST |ForEach-Object {
            $Local_File = Join-Path $Local_Download_Drive $Local_Download_Path |Join-Path -ChildPath $_.Name
            if (-not (Test-path -Path $Local_File))
            {
                $LOCAL_OLD_FILE = $LOCAL_FILE.Replace(".csv","_old.csv")
                if (-not (Test-path -Path $LOCAL_OLD_FILE))
                {
                    Remove-FTPItem -Session $FTP_Session -Path $FTP_List.FullName -LocalPath $Local_File
                }
                else
                {
                    Write-SkipLog ($EMSG_DELCSV_OLD_EXIST+$LOCAL_OLD_FILE)
                }    
            }
            else
            {
                Write-SkipLog ($EMSG_DELCSV_CSV_EXIST+$LOCAL_FILE)
            } 
        }
    }
}
##
## ADアカウント重複チェック処理 
##
Function Check-Account 
{
	[OutputType([String])]
	[CmdletBinding()]
	Param
    (
        [Parameter(Mandatory=$True,Position = 0)]
        [String]$Account
    )

    Begin 
    {
        [int]$Private:SkipCnt=0
    }
	Process 
    {
		$userFilterString = "samAccountName -eq `"" + $Account + "`""
		$rt = Get-ADUser -Filter $userFilterString
		if ($rt -ne $null)                                               ## ADにアカウントがない場合
        {
            Write-SkipLog ($EMSG_AccChk_NOTEXIST+$account)
            ++$SkipCnt
        }
        return $SkipCnt
	}
}

Function Add-wakaADGroup 
{
    [CmdletBinding()]
	Param (
			[string]$username=$(Throw "Error: Please enter a username!"),
            [string]$groupname
		)
	Process
	{
		if ((Check-Account $username) -gt 0) 
        {
            if ($groupname -eq "teachar")
            {
                $grpTBL = @("TeachersUsers","PrintAdmins","linux_teachers")              ##教員用ADグループ    
                $PGroupName = "linux_teachers"
            }
            elseif ($groupname -eq "doctor")
            {
                $grpTBL = @("StudentsUsers","linux_doctors","doctorGroup")               ##学生用(Doctor)ADグループ  
                $PGroupName = "linux_doctors"
                
            }
            elseif ($groupname -eq "master")
            {
                $grpTBL = @("StudentsUsers","linux_masters","masterGroup")               ##学生用(Doctor)ADグループ  
                $PGroupName = "linux_masters"
            }
            else
            {
                $grpTBL = @("StudentsUsers",("linux_"+$groupname),($groupname+"Group"))  ##学生用ADグループ  
                $PGroupName = ("linux_"+$groupname)
            }
            ## ADグループ登録処理
            ForEach ($ggg in $grpTBL) {
                $rt = Get-ADGroupMember -Identity $ggg |Where { $_.SamAccountName -eq $username }    ##ADグループにアカウントが存在するか
                if ($rt -eq $null)
                {
                    Add-ADGroupMember -Identity $ggg  -Member $username                  ##存在しないときADグループに登録
                }
                else
                {
                    Write-SkipLog ($EMSG_Set_ADGroup_Error+"User:"+$username+" ADGroup:"+$ggg)
                }
            }
            ## AD プライマリグループ登録処理
            $UserDistinguishedName = (Get-ADUser -Identity $username -ErrorAction Stop).DistinguishedName
            $rt = Get-ADGroupMember -Identity $PGroupName |Where { $_.SamAccountName -eq $username }
            if ($rt -eq $null)
            {
            ## 登録するADグループのPrimaryGroupTokenを取得    
                $PrimaryGroupID = (Get-ADGroup -Identity $PGroupName -Properties PrimaryGroupToken -ErrorAction Stop)
                Try
                {
            ## 登録するアカウントのPrimaryGroupの設定    
    		        Set-ADObject -Identity "$UserDistinguishedName" -replace @{PrimaryGroupID=$PrimaryGroupID}
                    Write-Resultlog ($MSG_Set_PrimaryGrp+"User:"+$username+" PrimaryGroup:"+$PGroupName)
                }
                Catch
                {
                    Write-ErrorLog ($EMSG_Set_PrimaryGrp_Error+"User:"+$username+" PrimaryGroup:"+$PGroupName)
                }
            }
            else
            {
                Write-ErrorLog ($EMSG_PrimaryGrp_Error+"User:"+$username+" PrimaryGroup:"+$PGroupName)
            }    
		}
	}
}


#========================================================
# File Server Function 
#========================================================
Function Create_WindowsHomeDir 
{
    [CmdletBinding()]
	Param (
			[string]$username=$(Throw "Error: Please enter a username!"),
			[string]$groupname="Domain Users",
			[string]$ADHomeDir
		)
    Begin
    {
        $PSSession = New-PSSession $WINFS -Credential $WinCredential  
    }
	Process
	{
        try
        {
            $HomeDirPath = $ADHomeDir.Replace($targer,$replace)
            if ($group -eq "teachar")
            {
            ##教員用 Windows HomeDir作成処理
                Invoke-Command -Session $PSSession -ScriptBlock {mkdir $args[0]} -ArgumentList $HomeDirPath
                Write-Resultlog ($MSG_HomeDir_Create+$HomeDirPath)
                Invoke-Command -Session $PSSession -ScriptBlock {mkdir $args[0]} -ArgumentList (Join-Path $HomeDirPath "¥public_html")
                Write-Resultlog ($MSG_HomeDir_public+$HomeDirPath)
                Invoke-Command -Session $PSSession -ScriptBlock {mkdir $args[0]} -ArgumentList (Join-Path $HomeDirPath "¥private_html")
                Write-Resultlog ($MSG_HomeDir_private+$HomeDirPath)
                Invoke-Command -Session $PSSession -ScriptBlock {icacls $args[0] /grant:r $args[1] :(CI)(OI)F /T /C /inheritance:e} -ArgumentList $HomeDirPath,$username
                Write-Resultlog ($MSG_HomeDir_grant+$HomeDirPath)
                Invoke-Command -Session $PSSession -ScriptBlock {icacls $args[0] /setown:r $args[1] /T /C} -ArgumentList $HomeDirPath,$username
                Write-Resultlog ($MSG_HomeDir_setown+$HomeDirPath)
            }
            else
            {
            ##学生用 Windows HomeDir作成処理
                $HomeDefaultPath = Join-Path (Split-Path $HomeDirPath -Parent) "¥home_default¥"
                Invoke-Command -Session $PSSession -ScriptBlock {mkdir $args[0]} -ArgumentList $HomeDirPath
                Write-Resultlog ($MSG_HomeDir_Create+$HomeDirPath)
                Invoke-Command -Session $PSSession -ScriptBlock {robocopy.exe /S /E /W:1 /R:1  $args[0]  $args[1]} -ArgumentList $HomeDefaultPath,$HomeDirPath
                Write-Resultlog ($MSG_HomeDir_robocopy+$HomeDirPath)
                Invoke-Command -Session $PSSession -ScriptBlock {mkdir $args[0]} -ArgumentList (Join-Path $HomeDirPath "¥private_html")
                Write-Resultlog ($MSG_HomeDir_private+$HomeDirPath)
                Invoke-Command -Session $PSSession -ScriptBlock {icacls $args[0] /grant:r $args[1] :(CI)(OI)F /T /C /inheritance:e} -ArgumentList $HomeDirPath,$username
                Invoke-Command -Session $PSSession -ScriptBlock {icacls $args[0] /grant:r $args[1] :(CI)(OI)RX /T /C /inheritance:e} -ArgumentList $HomeDirPath,"stu¥linux_"$group
                Write-Resultlog ($MSG_HomeDir_grant+$HomeDirPath)
                Invoke-Command -Session $PSSession -ScriptBlock {icacls $args[0] /setown:r $args[1] /T /C} -ArgumentList $HomeDirPath,$username
                Write-Resultlog ($MSG_HomeDir_setown+$HomeDirPath)
            }
        }
        catch
        {
            Write-ErrorLog ($EMSG_HomeDir_Create+$HomeDirPath)
        }
    } 
    End
    {
        Remove-PSSession $PSSession
    }
}

Function Creat_LinuxHomeDir 
{
	Param (
			[string]$username=$(Throw "Error: Please enter a username!"),
			[string]$groupname="Domain Users",
			[string]$HomeDirPath="Domain Users"
		)
    Begin {
        New-SshSession -ComputerName $SSH_Server -Username $SSH_User -Password $SSH_Pass -Port $SSH_Port
    }
	Process
	{
        $GrpPath = Split-Path (Split-Path $HomeDirPath -Parent) -Leaf
        Invoke-SSHCommand -Connection $SSHSession -ScriptBlock {mkdir /home/$args[0]} -ArgumentList $GrpPath"/"$UserName
        Invoke-SSHCommand -Connection $SSHSession -ScriptBlock {chown -R $args[0] /home/$args[1]} -ArgumentList $group,$GrpPath"/"$UserName
        Invoke-SSHCommand -Connection $SSHSession -ScriptBlock {chmod 700 /home/$args[0]} -ArgumentList $GrpPath"/"$UserName
    }
    End {
        Remove-SshSession -ComputerName $SSH_Server
    }
}

Function Move_Home
{
##MAIN
    $SUCMSG_START | Out-File -Append -Encoding 'utf8' -FilePath $LOG_FILE
    #バックアップ対象のフォルダがない場合は処理を停止
    if((Test-Path $target_dir) -eq $false)
    {
        $ERRMSG_FOLDER_EXIST | Out-File -Append -Encoding 'utf8' -FilePath $LOG_FILE
        exit 1
    }
    #退避先のユーザ種別フォルダがない場合は処理を停止
    if((Test-Path $bkup_user_type_dir) -eq $false)
    {
        $ERRMSG_BKUP_USER_FOLDER_EXIST | Out-File -Append -Encoding 'utf8' -FilePath $LOG_FILE
        exit 1
    }

    #退避先に同名のユーザフォルダが存在する場合は処理を停止
    if((Test-Path $bkup_target_dir) -eq $true)
    {
        $ERRMSG_BKUP_FOLDER_EXIST | Out-File -Append -Encoding 'utf8' -FilePath $LOG_FILE
        exit 1
}

#フォルダ退避処理
try{
  Move-Item $target_dir -destination $bkup_target_dir
}
catch{
  $ERRMSG_FOLDER_MOVE | Out-File -Append -Encoding 'utf8' -FilePath $LOG_FILE
  $error | Out-File -Append -Encoding 'utf8' -FilePath $LOG_FILE
  exit 1
}
$SUCMSG_FOLDER_MOVE | Out-File -Append -Encoding 'utf8' -FilePath $LOG_FILE

#タイムスタンプを現在の時刻にする (Linux の touch 相当)
try{
  $(Get-Item $bkup_target_dir).LastWriteTime = Get-Date
}
catch{
  $ERRMSG_TIMESTAMP | Out-File -Append -Encoding 'utf8' -FilePath $LOG_FILE
  $error | Out-File -Append -Encoding 'utf8' -FilePath $LOG_FILE
  exit 1
}
$SUCMSG_TIMESTAMP | Out-File -Append -Encoding 'utf8' -FilePath $LOG_FILE
$SUCMSG_ALL | Out-File -Append -Encoding 'utf8' -FilePath $LOG_FILE
exit 0
}

Function Check-Path
{
    ForEach ($cpath in $args)
    {
        if (-not (Test-Path -Path $cpath))
        {
            Write-ErrorLog $ERRMSG_File_Not_EXIST$cpath
        }
    }    
}

Function Check-Exist-Path
{
    ForEach ($cpath in $args)
    {
        if (Test-Path -Path $cpath)
        {
            Write-ErrorLog $ERRMSG_File_Already_EXIST$cpath
        }
    }
}

Function Rename-File
{
	[OutputType([String])]
	[CmdletBinding()]
    Param
    (
        [Parameter(Mandatory=$True,Position = 0)]
        [String]$FilePath,
        [Parameter(Mandatory=$True,Position = 1)]
        [String]$NewFileName
    )
    Process 
    {
        if(Test-Path -LiteralPath $FilePath -PathType Leaf)
        {
            $newFilePath = Join-Path -Path (Split-Path $FilePath -Parent) -ChildPath $NewFileName
            Move-Item -LiteralPath $FilePath -Destination $newFilePath
        }
        else 
        {
            Write-SkipLog $ERRMSG_RenFile_File_NOT_EXIST+$FilePath
        }
    }
}
filter Skip-Null { $_|?{ $_ } }
Function Join-Parts
{
 	[OutputType([String])]
	[CmdletBinding()]
    Param
    (
        $Parts = $null,
        $Separator = ''
    )
    Process 
    {
        [String]$s = ''
        $Parts | Skip-Null | ForEach-Object {
            $v = $_.ToString()
            if ($s -ne '')
           {
                if (-not ($s.EndsWith($Separator)))
                {
                    if (-not ($v.StartsWith($Separator)))
                    {
                        $s += $Separator
                    }
                    $s += $v
                }
                elseif ($v.StartsWith($Separator))
                {
                    $s += $v.SubString($Separator.Length)
                }
            }
            else
            {
                $s = $v
            }
        }
        $s
    }
}

###Main
#Add-TeachersADGroup tea002
#Set-PrimaryGroup tea002 linux_teachers

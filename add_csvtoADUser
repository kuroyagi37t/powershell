Import-Module ActiveDirectory

## 前処理 (共通)
$ErrorActionPreference = "Stop"
$WarningPreference = "Continue"
$VerbosePreference = "Continue"
$DebugPreference = "Continue"

##スクリプト共通変数
[string]$Script:baseDir = Convert-Path $(Split-Path $MyInvocation.InvocationName -Parent)
[string]$Script:psName = Split-Path $MyInvocation.InvocationName -Leaf
[string]$Script:psBaseName = $psName -replace "\.ps1$", ""
[string]$Script:timestamp = Get-Date -Format "yyyyMMdd-HHmmss"


##スクリプト内共通エラーメッセージ
[string]$Script:ERRMSG_AD_Error=$timestamp+': ADサーバと接続できません。'+$account
[string]$Script:ERRMSG_CSV_Not_EXIST=$timestamp+': CSVファイルがありません。'+$account
[string]$Script:ERRMSG_AccDupChk_ACC_EXIST=$timestamp+': アカウント名が重複しています。'+$account
[string]$Script:ERRMSG_AccDupChk_ACC_Char_Err=$timestamp+': アカウント名がOffice365の使用でるきる文字の制限を満たしていません。'+$account
[string]$Script:ERRMSG_AccDupChk_ACC_Long=$timestamp+': アカウント名がOffice365の制限(48文字以内)を満たしていません。'+$account
[string]$Script:ERRMSG_AccDupChk_Email_EXIST=$timestamp+':eMailアドレスが重複しています。'+$email
[string]$Script:ERRMSG_PwdChk_PwdLen_o365_Err=$timestamp+': パスワードの長さがOffice365の制限より不足しています'+$account
[string]$Script:ERRMSG_PwdChk_PwdLen_Short=$timestamp+': パスワードの長さが不足しています'+$account
[string]$Script:ERRMSG_PwdChk_PwdPol_unmatch=$timestamp+':パスワードが複雑性(文字種が英小、英大、数字、記号のうち3つ)の要求を満たしていません。'+$account
[string]$Script:ERRMSG_CreateUser_Err=$timestamp+':アカウントの登録に失敗しました。'+$account
[string]$Script:ERRMSG_CSV_Chk_Err=$timestamp+':CSVの内容でエラーがあったため処理を中止します。'

##共通モジュール読み込み
. $baseDir\ExportLog.ps1

## スクリプト内変数
[int]$local:SKIPCNT=0
try {
    $local:PassPolicy = Get-ADDefaultDomainPasswordPolicy -ErrorAction Stop
    $local:MyDomain = Get-ADDomain -ErrorAction Stop
}
catch {
    Write-SkipLog $ERRMSG_AD_Error
    Exit 1 
}


##CSV読み込み

$csvin = Import-Csv -Encoding UTF8 $csvfilepath 
##CSVの内容チェック
$csvin | Foreach-Object {
	Check-Account($_.ログイン名,$_.電子メールアドレス)
    Check-PasswordPolicy($_.ログイン名,$_.パスワード)
}
if ($SKIPCNT -eq 0) {
    $csvin | Foreach-Object{
    	$AccountList = @{
    		Path="OU="+$_.OU+",OU=user,"+$MyDomain.distinguishedname
	    	sAMAccountName=$_.ログイン名
		    UPN=$_.ログイン名 + "@" + $MyDomain.DNSRoot
    		Name=$_.ログイン名
	    	Password=ConvertTo-SecureString -AsPlainText $_.パスワード -Force
		    EmailAddress=$_.電子メールアドレス
    		sn=$_.姓
	    	GivenName=$_.名
		    DisplayName=$_.表示名
            Description="Office365連携用アカウント"
	    };
        Create-ADUser ($AccountList)
    }
}
else {
    Write-SkipLog ERRMSG_CSV_Chk_Err
}
##
## アカウント重複チェック処理 
##
Function Check-Account {
	[OutputType([String])]
	[CmdletBinding()]
	Param($account,$email)
	Process {
		#Check to see if the user already exists
		$userFilterString = "samAccountName -like `"" + $account + "`""
		$user = Get-ADUser -Filter $userFilterString
		#If user not already created, create them
		if ($user -ne $null) {
            Write-SkipLog $ERRMSG_AccDupChk_ACC_EXIST
            ++$SKIPCNT
            return 1
        }
		#Check to see if the Email already exists
		$userFilterString = "email -eq $email "
		$user = Get-ADUser -Filter $userFilterString
		#If email not already created, create them
		if ($user -ne $null) {
            Write-SkipLog $ERRMSG_AccDupChk_EMail_EXIST
            ++$SKIPCNT
			return 2
		}
        return 0
	}
}
##
## パスワードポリシーチェック処理 
##
##  英小文字、英大文字、数字、記号 @ # $ % ^ & * – _ + = [ ] { } | \ : ‘' , . ? / ` ~ “ < > ( ) ;
Function Check-Password{
	[OutputType([String])]
	[CmdletBinding()]
	Param($account,$password)
	Process {
		#パスワードの長さチェック o365のポリシー
		if ($password.length -le $passpolicy.MinPasswordLength) {
            Write-SkipLog $ERRMSG_PwdChk_PwdLen_Short
            ++$SKIPCNT
		}
		#パスワードの長さチェック ADのポリシー
		if ($password.length -le $passpolicy.MinPasswordLength) {
            Write-SkipLog $ERRMSG_PwdChk_PwdLen_Short
            ++$SKIPCNT
		}
		#複雑性のチェック 2種類以下の場合はNG
		if($passpolicy.ComplexityEnabled -eq "True") {
			if(($password -cmatch "[a-z]")+ `
               ($password -cmatch "[A-Z]")+ `
               ($password -cmatch "[0-9]")+ `
               ($password -cmatch "[@#$%^&*-_+=\[\]{}|\\:',.?/`~<>()]") -le 2) {
                Write-SkipLog $ERRMSG_PwdChk_PwdPol_unmatch
                ++$SKIPCNT
			}
		}
	} 
}

#Create an Active Directory user
Function Create-ADUser {
	[OutputType([String])]
	[CmdletBinding()]
	Param($AccountInfo)
	Process {
		try {
			#Check to see if the user already exists
			$userFilterString = "samAccountName -like `"" + $AccountInfo['sAMAccountName'] + "`""
			$user = Get-ADUser -Filter $userFilterString
			#If user not already created, create them
			if ($user -eq $null) {
				write-host "Creating user account:" $AccountInfo['sAMAccountName']
				#Create the user account object
				New-ADUser -SamAccountName $AccountInfo['sAMAccountName'] `
						   -Name $AccountInfo['displayName'] `
						   -DisplayName $AccountInfo['displayName'] `
						   -GivenName $AccountInfo['givenName'] `
						   -Surname $AccountInfo['sn'] `
                           -UserPrincipalName $AccountInfo['UPN'] `
                           -EmailAddress $AccountInfo['EMailAddress'] `
						   -Path $AccountInfo['ou'] `
						   -AccountPassword (ConvertTo-SecureString $AccountInfo['password'] -AsPlainText -Force) `
						   -Description $AccountInfo['description'] 		   
                if ($? -eq $false ) {
                    Write-SkipLog $ERRMSG_CreateUser_Err
                }
				#Set 'User must change password at next logon' to true after user has been created
				#For some reason, the option wasn't set during New-ADUser - could be a bug?

			}
			else {
                Write-SkipLog $ERRMSG_AccDupChk_ACC_EXIST
			}
		}
		catch {
            Write-SkipLog $ERRMSG_CreateUser_Err
		}
	}
}

function Rename-File{
	[OutputType([String])]
	[CmdletBinding()]
    Param(
        [Parameter(Mandatory=$True,Position = 0)]
        [String]$FilePath,
        [Parameter(Mandatory=$True,Position = 1)]
        [String]$NewFileName
    )
    Process {
        if(Test-Path -LiteralPath $FilePath -PathType Leaf){
            $newFilePath = Join-Path -Path (Split-Path $FilePath -Parent) -ChildPath $NewFileName
            Move-Item -LiteralPath $FilePath -Destination $newFilePath
        }
        else {
            Write-SkipLog $ERRMSG_RenFile_File_NOT_EXIST+$FilePath
        }
    }
}


Function Set_ADPasswordSync {
    $adConnector = "<CASE SENSITIVE AD CONNECTOR NAME>"
    $aadConnector = "<CASE SENSITIVE AAD CONNECTOR NAME>"
    Import-Module adsync
    $c = Get-ADSyncConnector -Name $adConnector
    $p = New-Object Microsoft.IdentityManagement.PowerShell.ObjectModel.ConfigurationParameter “Microsoft.Synchronize.ForceFullPasswordSync”, String, ConnectorGlobal, $null, $null, $null
    $p.Value = 1
    $c.GlobalParameters.Remove($p.Name)
    $c.GlobalParameters.Add($p)
    $c = Add-ADSyncConnector -Connector $c
    Set-ADSyncAADPasswordSyncConfiguration -SourceConnector $adConnector -TargetConnector $aadConnector -Enable $false
    Set-ADSyncAADPasswordSyncConfiguration -SourceConnector $adConnector -TargetConnector $aadConnector -Enable $true
}
